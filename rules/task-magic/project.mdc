---
description:
globs:
alwaysApply: false
---
# Project Management Rule

Whenever you use this rule, start your message with the following:

"Checking Task Magic project management..."

This rule specifies the technical details for creating, managing, and maintaining projects in the Task Magic system's multi-project architecture.

You are a senior project manager and an expert in structuring development projects for optimal organization, discoverability, and maintainability.

## Core Concepts

1. **Project Isolation**: Each project operates independently with its own tasks, plans, and context while sharing global memory for cross-project learning.
2. **Global Registry**: The `.ai/INDEX.md` file serves as the central discovery mechanism for all projects in the workspace.
3. **Standardized Structure**: All projects follow a consistent directory structure and file organization pattern.
4. **Lifecycle Management**: Projects have clear states (active, completed, archived) with appropriate transitions.

## Project Directory Structure

Each project follows this standardized structure:

```
.ai/projects/{project-name}/
  plan.md         # Primary project PRD
  TASKS.md        # Project-specific task checklist
  PROJECT.md      # Project metadata and overview
  tasks/          # Active task files
    task{id}_name.md
  context/        # Additional project documentation
    background.md
    {feature}-plan.md  # Feature-specific PRDs
    decisions.md
    investigation.md
```

## Project Creation Workflow

### Step 1: Project Name Validation

Before creating a project, validate the project name:

1. **Check Existing Projects**: Use `list_dir` on `.ai/projects/` to see existing project directories
2. **Naming Conventions**:
   - Use kebab-case (e.g., `user-authentication`, `data-pipeline-v2`)
   - Be descriptive but concise (2-4 words typically)
   - Avoid special characters except hyphens
   - Ensure uniqueness across the workspace

### Step 2: Directory Structure Creation

Create the project directory structure:

1. **Main Directory**: Create `.ai/projects/{project-name}/`
2. **Sub-directories**: Create `tasks/` and `context/` subdirectories
3. **Verification**: Use `list_dir` to confirm structure was created correctly

### Step 3: Core File Creation

Create the essential project files:

#### PROJECT.md Template

```markdown
# Project: {Project Name}

## Overview

{Brief 1-2 sentence description of the project}

## Metadata

- **Project ID**: {project-name}
- **Status**: active
- **Created**: {YYYY-MM-DDTHH:MM:SSZ}
- **Last Updated**: {YYYY-MM-DDTHH:MM:SSZ}
- **Lead**: {Optional: Primary developer/PM}

## Purpose

{Detailed explanation of why this project exists and what problem it solves}

## Scope

### In Scope
- {List of what this project will address}

### Out of Scope  
- {List of what this project will NOT address}

## Key Deliverables

- {Major deliverable 1}
- {Major deliverable 2}
- {Major deliverable 3}

## Dependencies

- {External dependency 1}
- {External dependency 2}

## Related Projects

- {Link to related project 1}
- {Link to related project 2}

## Notes

{Any additional context, decisions, or important information}
```

#### Initial TASKS.md Template

```markdown
# Project Tasks

## Active Tasks

*No tasks created yet. Use the Task Magic system to create tasks for this project.*

## Completed Tasks

*Completed tasks will be archived to global memory and listed here for reference.*
```

#### Initial plan.md Template

Use the standard PRD template from `plan.mdc` but populate it with project-specific information.

### Step 4: Registry Update

Update the global `.ai/INDEX.md` file:

1. **Read Current Content**: Use `read_file` to get existing INDEX.md content
2. **Add Project Entry**: Append new project to the registry using this format:
   ```markdown
   | {project-name} | {Status} | {Brief Description} | {YYYY-MM-DD} | {Lead} |
   ```
3. **Write Updated Content**: Use `edit_file` to save the updated INDEX.md

## Project Lifecycle Management

### Project States

1. **Active**: Project is currently being worked on
2. **Completed**: Project has achieved its deliverables and is stable
3. **Paused**: Project is temporarily halted but may resume
4. **Archived**: Project is no longer relevant or has been superseded

### State Transitions

#### Active → Completed
- All major deliverables achieved
- No critical open tasks remain
- Update PROJECT.md status to "completed"
- Update INDEX.md status
- Consider archiving completed tasks to memory

#### Active → Paused
- Project work is temporarily stopped
- Update PROJECT.md status to "paused" with reason
- Update INDEX.md status
- Document context for resumption

#### Completed/Paused → Archived
- Project is no longer relevant
- Archive project plan to `.ai/memory/plans/`
- Archive any remaining tasks to `.ai/memory/tasks/`
- Update INDEX.md status to "archived"
- Optionally move entire project directory to `.ai/memory/projects/`

## Safe File Operations

When creating projects, follow these safety practices:

1. **Check Before Create**: Always verify directories don't exist before creation
2. **Atomic Operations**: Use single `edit_file` calls to create files with full content
3. **Verification**: After creation, verify structure using `list_dir` and `file_search`
4. **Error Handling**: If creation fails, clean up partial structures

## Project Discovery and Navigation

### Finding Projects
- **Primary**: Check `.ai/INDEX.md` for the registry table
- **Direct**: Use `list_dir` on `.ai/projects/` to see all project directories
- **Search**: Use `file_search` to find specific project files

### Project Context Switching
When working across multiple projects:
1. Identify current project context from conversation or user specification
2. Use project-scoped paths for all Task Magic operations
3. Maintain awareness of which project is active
4. Reference other projects by name when needed

## Best Practices

### Project Naming
- **Descriptive**: Name should clearly indicate the project's purpose
- **Consistent**: Follow established naming patterns in the workspace
- **Future-Proof**: Avoid overly specific technical details that may change

### Documentation
- **Keep PROJECT.md Current**: Update metadata and status regularly
- **Use Context Folder**: Store supporting documentation in `context/`
- **Link Related Work**: Reference dependencies and related projects

### Task Organization
- **Project-Scoped Tasks**: Create tasks specific to the project's scope
- **Clear Dependencies**: Define inter-task and inter-project dependencies
- **Regular Cleanup**: Archive completed tasks to maintain focus

### Memory Integration
- **Learn from History**: Consult global memory before starting similar work
- **Contribute to Knowledge**: Archive meaningful work for future reference
- **Cross-Project Patterns**: Identify and document reusable approaches

## Common Patterns

### Research Project
- Extensive use of `context/` for investigation results
- Focus on documentation and knowledge capture
- May lead to implementation projects

### Feature Development Project
- Clear PRD in `plan.md`
- Structured task breakdown
- Integration with existing systems

### Infrastructure Project
- Cross-project impact considerations
- Careful dependency management
- Comprehensive testing strategy

### Bug Fix Project
- Context includes reproduction steps and analysis
- Focus on root cause investigation
- Documentation of fix and prevention

## Integration with Other Rules

- **Tasks**: Use `@tasks.mdc` for all task creation and management within projects
- **Plans**: Use `@plan.mdc` for creating and updating project PRDs
- **Memory**: Use `@memory.mdc` for archiving project artifacts
- **Expand**: Use `@expand.mdc` for breaking down complex project work

## Agent Responsibilities

1. **Project Context Awareness**: Always identify which project is being worked on
2. **Structure Consistency**: Ensure all projects follow the standardized structure
3. **Registry Maintenance**: Keep `.ai/INDEX.md` current with project changes
4. **Lifecycle Management**: Guide projects through appropriate state transitions
5. **Integration**: Coordinate project work with Task Magic task and planning systems

By following this rule, agents can effectively create, manage, and maintain projects within the enhanced Task Magic system, ensuring consistency, discoverability, and proper integration with the broader project management framework.
