---
description: This rule explains how the agent should use the memory system to find context of the project.
globs: 
alwaysApply: false
---
# AI Memory System

Whenever you use this rule, start your message with the following:

"Checking Task Magic memory..."

This project utilizes a **single-location memory system** with project-specific memory archives for optimal local context management. Each project maintains its own isolated memory archive, providing focused historical context without the complexity of dual archival.

## Memory Structure

The memory system uses a simplified, project-focused approach:

### Project-Level Memory (Single Location)

Each project maintains its own memory archive:

*   **`_parallel/projects/{project}/memory/tasks/`**: Contains archived task files (`task{id}_name.md`) specific to this project. Tasks are archived here when completed or failed within the project context.
*   **`_parallel/projects/{project}/memory/MEMORY.md`**: Project-specific memory summary file that aggregates key learnings, milestones, and insights from this project's development history.
*   **`_parallel/projects/{project}/memory/TASKS_LOG.md`**: Project-specific chronological log of archived tasks for easy historical reference.

### Global Workspace Memory (Deprecated)

The global memory system (`_parallel/memory/`) is deprecated in favor of project-scoped memory. For cross-project learning, consult individual project memory files directly.

### Legacy Support

For backwards compatibility:

*   **`_parallel/tasks/`** → **`_parallel/projects/{project}/memory/tasks/`** (migrate to project-specific memory)
*   **`_parallel/memory/tasks/`** → **`_parallel/projects/{project}/memory/tasks/`** (existing global archives can be migrated to relevant projects)

## Archival Process

The archival process uses a simplified single-location approach:

### Task Archival (Single Location)

For tasks originating from `_parallel/projects/{project}/tasks/`:

1. **Move to Project Memory**: Move the task file to `_parallel/projects/{project}/memory/tasks/`
2. **Update Project Memory**: Update `_parallel/projects/{project}/memory/MEMORY.md` with task insights
3. **Update Project Log**: Append to `_parallel/projects/{project}/memory/TASKS_LOG.md` with task details
4. **Remove from Active List**: Remove the task entry from `_parallel/projects/{project}/TASKS.md`

### Legacy Task Migration

For tasks from legacy locations (`_parallel/tasks/` or `_parallel/memory/tasks/`):

1. **Identify Project Context**: Determine the appropriate project based on task content or user input
2. **Move to Project Memory**: Migrate the task to the relevant `_parallel/projects/{project}/memory/tasks/`
3. **Update Project Log**: Add migration note to `_parallel/projects/{project}/memory/TASKS_LOG.md`

## Updated Directory and File Management

### Safe Archival Operations

When archiving project tasks, follow this simplified process:

1. **Project Task Archival**:
   ```bash
   # Move to project memory (single location)
   mv _parallel/projects/{project}/tasks/task{id}_name.md _parallel/projects/{project}/memory/tasks/
   ```

2. **Ensure Directory Exists**:
   - Check if `_parallel/projects/{project}/memory/tasks/` exists using `list_dir`
   - Create if needed when writing the first archived task

3. **No Secondary Copy**: Tasks are archived only to their project's memory, not to any global location

### Project Memory Updates

When archiving project tasks, update the project's MEMORY.md file:

1. **Read Current Project Memory**: Use `read_file` on `_parallel/projects/{project}/memory/MEMORY.md`
2. **Extract Task Insights**: Analyze the archived task for key learnings, patterns, or decisions
3. **Update Relevant Sections**: Add insights to appropriate sections (Key Learnings, Major Milestones, Architecture Decisions)
4. **Preserve Structure**: Maintain the template structure while adding new insights

### Example Project Memory Update

```markdown
## Key Learnings and Insights

### Development Patterns Discovered
- Progress-based handoffs are more effective than iteration-based handoffs for context transfer
- User-triggered progress updates provide better control than automatic updates
- **NEW**: Task expansion into sub-tasks improves granular tracking without overwhelming the main checklist

### Technical Discoveries
- File-based system scales well with proper directory organization
- YAML frontmatter provides reliable metadata tracking
- **NEW**: Hierarchical memory system enables both local context and cross-project learning
```

## Log Formats

### Project MEMORY.md Updates

When archiving project tasks, append insights to the project's MEMORY.md in the appropriate sections:

```markdown
## Major Milestones

### Phase 2: Advanced Features (Tasks 14-27) - IN PROGRESS
- **Task 21 COMPLETED**: Transformed handoff system to progress-based approach
- **Task 25 COMPLETED**: Consolidated legacy system guidance into comprehensive rule
- **Task 26.1 COMPLETED**: Created hierarchical memory structure [ARCHIVED: 2025-06-10]
- **Task 26.2 COMPLETED**: Updated archival process for project-specific memory [ARCHIVED: 2025-06-10]
```

### Project TASKS_LOG.md Format

When archiving tasks, append an entry to `_parallel/projects/{project}/memory/TASKS_LOG.md` using this format:

```markdown
- Archived **ID {id}: {Title}** (Status: {completed/failed}) on {YYYY-MM-DDTHH:MM:SSZ}
> Dependencies: {dep_id1}, {dep_id2}... (Only shown if dependencies exist in YAML, use full IDs like 15 or 15.1)
> {Description} (Extracted from task file)
```

Note: Each project maintains its own TASKS_LOG.md file within its memory directory for project-specific historical tracking.

## Purpose and Usage

The single-location memory system provides focused project context:

### Project-Level Benefits

*   **Local Context**: Quick access to project-specific historical decisions and patterns
*   **Focused Learning**: Project memory contains only relevant context for current work
*   **Development Narrative**: Project MEMORY.md tells the complete story of the project's evolution
*   **Simplified Management**: No complexity of dual archival or synchronization issues

### Memory Consultation Workflow

1. **Check Project Memory**: Start with `_parallel/projects/{project}/memory/MEMORY.md` for high-level insights
2. **Review Task Log**: Check `_parallel/projects/{project}/memory/TASKS_LOG.md` for chronological task history
3. **Dive into Archives**: Review `_parallel/projects/{project}/memory/tasks/` for detailed task files
4. **Cross-Project Learning**: For patterns from other projects, manually consult other project memory directories

## Archival Commands

### Archive Commands

The agent should interpret archive requests as follows:

**"Archive Tasks" (from project context):**
1. Identify completed/failed tasks in current project's `tasks/` directory
2. For each task:
   - Read full task content (YAML + description)
   - Move to project memory: `mv _parallel/projects/{project}/tasks/task{id}_name.md _parallel/projects/{project}/memory/tasks/`
   - Update project MEMORY.md with insights
   - Update project TASKS_LOG.md with task entry
   - Remove from project TASKS.md

**Key Changes from Previous System:**
- **Single Archival**: Tasks are moved only to project memory, not copied to any global location
- **Project-Scoped Logs**: Each project maintains its own TASKS_LOG.md file
- **Simplified Process**: No dual archival complexity or global memory updates

This single-location approach maintains focused project context while simplifying the archival process and avoiding synchronization issues.