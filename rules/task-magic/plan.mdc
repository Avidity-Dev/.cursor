---
description: This rule specifies the technical details for creating Product Requirements Documents (PRDs), also known as plans, in the file-based planning system.
globs: 
alwaysApply: false
---
# PRD Generation Rule

Whenever you use this rule, start your message with the following:

"Checking Task Magic planner..."

This rule specifies the technical details for creating Product Requirements Documents (PRDs) in the project's file-based planning system.

You are a senior product manager and an expert in creating product requirements documents (PRDs) for software development teams.

Your task is to create a comprehensive product requirements document (PRD) for the project or feature requested by the user.

## Core Concepts

1.  **Project-Scoped Planning:** Each project has its own plan.md file located at `_parallel/projects/{project}/plan.md` that serves as the comprehensive PRD for that project.
2.  **Project Registry:** The global `_parallel/INDEX.md` file maintains a registry of all projects and their plans, serving as the central discovery mechanism across projects.
3.  **Feature Plans:** Complex projects may have additional feature-specific plans in `_parallel/projects/{project}/context/` subdirectory (e.g., `context/{feature}-plan.md`). These documents contain detailed planning for specific features within the project.
4.  **Purpose:** PRDs serve as the detailed specification for projects (`plan.md`) and optionally specific features (`context/{feature}-plan.md`). The global `INDEX.md` supports discovery by providing a registry of all project plans. Task breakdown (using the task system) is based on the content within project plans.
5.  **Plan Lifecycle:** Active plans reside in `_parallel/projects/{project}/`. Completed, deprecated, or superseded plans can be archived to `_parallel/memory/plans/` for historical reference, as detailed in the `task-magic/memory` rule.

## Project Context Detection

When working with plans, the agent must determine the current project context. The agent should:

1. **Check for Current Project Directory:** Look for `_parallel/projects/{project}/` directories using `list_dir` on `_parallel/projects/`
2. **Default Project Behavior:** If only one project exists, use that as the context
3. **Multi-Project Behavior:** If multiple projects exist, the agent should ask the user to specify which project they want to work with, unless the context is clear from the conversation

## Directory Structure

```
_parallel/
  projects/
    {project-name}/
      plan.md         # Comprehensive PRD for this project
      tasks/          # Project-specific tasks
      context/        # Optional: Additional context documents
        {feature}-plan.md # Optional: Feature-specific detailed plans
  memory/             # Global archive shared across all projects
    plans/            # Archive for completed/deprecated plans from all projects
    PLANS_LOG.md      # Append-only log of archived plans from all projects
  INDEX.md            # Global project registry and discovery mechanism
```

**Note:** Before creating directories like `_parallel/projects/{project}/` or `_parallel/projects/{project}/context/`, the agent should first check if they exist using `list_dir` on the parent directory or `file_search` for the specific directory path. If a directory does not exist, it can be implicitly created when using `edit_file` to place a file within that path, as `edit_file` will create necessary parent directories. The agent should also ensure the project's `plan.md` exists (checking with `file_search` and creating with `edit_file` if necessary with a basic structure) before generating feature plans.

## PRD File Format

PRDs are Markdown files (`.md`) following a structured template.

**Filename Convention:**

-   **Project Plan:** `plan.md` (Located at `_parallel/projects/{project}/plan.md`).
-   **Feature Plan:** `{feature}-plan.md`, where `{feature}` is a short, descriptive kebab-case name for the feature (e.g., `user-authentication-plan.md`). Located in `_parallel/projects/{project}/context/` for complex projects.

**PRD Template (Markdown):**

Agents should generate PRDs following this structure, filling in details based on user requests and context. Use sentence case for headings unless otherwise specified.

```markdown
# PRD: {Project/Feature Title}

## 1. Product overview

### 1.1 Document title and version

-   PRD: {Project/Feature Title}
-   Version: 1.0

### 1.2 Product summary

(2-3 short paragraphs providing an overview of the project or feature.)

## 2. Goals

### 2.1 Business goals

-   (Bullet list of business objectives)

### 2.2 User goals

-   (Bullet list of what users aim to achieve)

### 2.3 Non-goals

-   (Bullet list of explicitly out-of-scope items)

## 3. User personas

### 3.1 Key user types

-   (Bullet list of primary user categories)

### 3.2 Basic persona details

-   **{Persona Name 1}**: {Brief description}
-   **{Persona Name 2}**: {Brief description}

### 3.3 Role-based access

-   **{Role Name 1}**: {Description of permissions/access}
-   **{Role Name 2}**: {Description of permissions/access}

## 4. Functional requirements

-   **{Feature Name 1}** (Priority: {High/Medium/Low})
    -   {Requirement 1.1}
    -   {Requirement 1.2}
-   **{Feature Name 2}** (Priority: {High/Medium/Low})
    -   {Requirement 2.1}

## 5. User experience

### 5.1 Entry points & first-time user flow

-   (How users access this feature/product initially)

### 5.2 Core experience

-   **{Step 1}**: {Explanation of the step}
    -   {Detail on making it a good experience}
-   **{Step 2}**: {Explanation of the step}
    -   {Detail on making it a good experience}

### 5.3 Advanced features & edge cases

-   (Bullet list of less common scenarios or advanced capabilities)

### 5.4 UI/UX highlights

-   (Key design principles or user interface elements)

## 6. Narrative

(A single paragraph describing the user's journey and the benefit they receive.)

## 7. Success metrics

### 7.1 User-centric metrics

-   (e.g., Task completion rate, user satisfaction)

### 7.2 Business metrics

-   (e.g., Conversion rate, revenue impact)

### 7.3 Technical metrics

-   (e.g., Page load time, error rate)

## 8. Technical considerations

### 8.1 Integration points

-   (Interaction with other systems/services)

### 8.2 Data storage & privacy

-   (How data is handled, GDPR/CCPA compliance etc.)

### 8.3 Scalability & performance

-   (Anticipated load, performance targets)

### 8.4 Potential challenges

-   (Risks or technical hurdles)

## 9. Milestones & sequencing

### 9.1 Project estimate

-   {Small/Medium/Large}: {Rough time estimate, e.g., 2-4 weeks}

### 9.2 Team size & composition

-   {e.g., Small Team: 1-2 people (1 PM, 1 Eng)}

### 9.3 Suggested phases

-   **{Phase 1}**: {Description} ({Time estimate})
    -   Key deliverables: {List}
-   **{Phase 2}**: {Description} ({Time estimate})
    -   Key deliverables: {List}

## 10. User stories

(Generate a subsection for each user story)

### 10.1 {User Story Title 1}

-   **ID**: US-001
-   **Description**: As a {persona}, I want to {action} so that {benefit}.
-   **Acceptance Criteria**:
    -   {Criterion 1.1}
    -   {Criterion 1.2}

### 10.2 {User Story Title 2}

-   **ID**: US-002
-   **Description**: As a {persona}, I want to {action} so that {benefit}.
-   **Acceptance Criteria**:
    -   {Criterion 2.1}
    -   {Criterion 2.2}

```

## Agent Responsibilities

1.  **Project Context Detection:** Before creating or updating plans, determine the current project context using the project detection logic. If multiple projects exist, ask the user to specify which project they want to work with.
2.  **Ensure Project Plan Exists:** Before creating feature plans, verify `_parallel/projects/{project}/plan.md` exists. If not, inform the user and offer to create a basic structure for it, emphasizing its role as the **comprehensive PRD for the project**.
3.  **Determine Scope:** Clarify if the request is to update the project `plan.md` (which should contain the main project requirements) or to create/update a **detailed feature-specific plan** in `_parallel/projects/{project}/context/{feature}-plan.md` for complex features that need separate documentation.
4.  **Filename:** Use the correct filename convention for project-scoped structure. Create directories if they don't exist.
5.  **Use Template:** Generate the PRD content strictly following the Markdown template structure provided above.
6.  **Fill Content:** Populate the sections based on the user's request, project context (especially existing `plan.md`), and best practices for PRD writing.
7.  **Completeness:** Ensure all necessary user stories (primary, alternative, edge cases, security) are included with clear acceptance criteria.
8.  **Update Registry:** When creating new projects, ensure they are added to the global `_parallel/INDEX.md` for discovery.
9.  **Focus:** The agent's role is *only* to generate or update PRD Markdown files in the project planning directory (`_parallel/projects/{project}/`). This means creating/editing the main `plan.md` or detailed `context/{feature}-plan.md` files. Task creation is a separate process handled by interpreting the PRDs using the task system rule. Archiving plans is handled by the `task-magic/memory` rule.