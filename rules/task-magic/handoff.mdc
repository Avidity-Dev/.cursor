---
description: This rule specifies the technical details for creating handoff instruction files in the file-based planning system.
globs: 
alwaysApply: false
---
# Task Magic: Progress-Based Handoffs

## 1. Purpose

Progress files are designed to ensure smooth context transfer between AI assistant sessions or threads when working within a specific project in the Task Magic system. They provide a continuous, chronological record of project progress, current status, key discoveries, and immediate next actions, allowing a new AI instance to quickly understand the full development journey and continue productively.

This complements PROJECT.md files by providing a dynamic progress narrative (story) while PROJECT.md maintains static project structure and metadata.

## 2. Location and Naming Convention

-   **Directory**: Each project maintains its own progress artifacts within the project directory.
-   **Files & Purpose**:
    -   `progress_log.md` ‚Äì *append-only* chronological log (‚úèÔ∏è never modified, only appended).
    -   `STATUS.md` ‚Äì *living* snapshot for quick hand-offs (üìù fully overwritten each session).
-   **Examples**: 
    -   `_parallel/projects/task-magic-enhancement/progress_log.md`
    -   `_parallel/projects/task-magic-enhancement/STATUS.md`
    -   `_parallel/projects/user-authentication/progress_log.md`
    -   `_parallel/projects/user-authentication/STATUS.md`

## 3. Content Structure

### 3.1 `progress_log.md` (append-only)

Header (static ‚Äì written once at creation):
```markdown
# Project Progress Log: {Project Name}

**Project**: {Project Name}  
**Started**: {YYYY-MM-DD}
```

Then **Progress Entries** in strict chronological order:
```markdown
## Progress Entry - {YYYY-MM-DD HH:MM UTC}

### Context
Brief description of what work was being done or session context.

### Key Accomplishments
- Bullet points of what was completed
- Major milestones reached
- Important discoveries or insights

### Current Situation
- Status of ongoing work
- Any issues encountered or debugged
- Key decisions made

### Immediate Next Actions
1. Specific next steps with clear priorities
2. Strategy for tackling upcoming work
3. Success criteria for next session

### Key Files
- List of relevant files worked on or referenced
- Task files involved (e.g., `task21_update_handoff_rules.md`)
- Any critical logs, data, or configuration files

### Notes & Discoveries
- Technical insights gained
- Architecture decisions
- Patterns or approaches learned
- Any warnings or considerations for future work
```
*No "Current Status" section in this file ‚Äì that lives in `STATUS.md`.*

### 3.2 `STATUS.md` (living snapshot)

```markdown
# Current Status ‚Äì {Project Name}

**Last Updated**: {YYYY-MM-DDTHH:MM:SSZ}

## At-a-Glance
| Metric            | Value                                |
|-------------------|--------------------------------------|
| Active Tasks      | 3 (Tasks 2,3,4)                      |
| Completed Tasks   | 5 / 8                                |
| Next Priority     | Task 2 ‚Äì Align Repository Config     |
| Blockers          | None                                 |
| Target Milestone  | v0.2 release ‚Äì 2025-06-15            |

## High-Level Goal
One-sentence north-star objective for the project.

## Immediate Next Actions
1. ‚Ä¶
2. ‚Ä¶
3. ‚Ä¶

## Links
- Task board ‚Üí `_parallel/projects/{project}/TASKS.md`
- Detailed log ‚Üí `_parallel/projects/{project}/progress_log.md`
- PRD ‚Üí `_parallel/projects/{project}/plan.md`
```

## 4. Update Guidelines

**Automation**: Agents must update both files *proactively* at the end of every work session **or** whenever significant project state changes‚Äîno explicit user prompt required.

### 4.1  Updating `progress_log.md`
1. **Append** a new *Progress Entry* section (never touch earlier entries).
2. Use UTC timestamp from `date -u +"%Y-%m-%d %H:%M"` in entry heading.

### 4.2 Updating `STATUS.md`
1. **Overwrite** the entire file.
2. Refresh *Last Updated* timestamp (UTC ISO-8601).
3. Re-compute At-a-Glance metrics and Immediate Next Actions.
4. Keep file concise (‚â§ 2 screens).

## 5. Progress vs PROJECT.md Relationship

- **PROJECT.md**: Static project structure, goals, scope, and metadata
- **progress_log.md**: Dynamic narrative of the development journey and current state
- Both files complement each other but serve different purposes
- PROJECT.md is the "blueprint", progress_log.md is the "construction log"

## 6. Integration with Task Magic System

### Multi-Project Architecture
- Each project maintains its own isolated progress context
- Progress files work alongside project-scoped task files in `_parallel/projects/{project}/tasks/`
- Progress complements the project's TASKS.md checklist by providing detailed context

### Relationship to Global Systems
- Project progress files feed into workspace-level progress tracking (see Task 27)
- Individual project progress remains project-scoped and detailed
- Global progress captures cross-project patterns and insights

### Task Integration
- Progress entries should reference specific task IDs when relevant
- Major task completions should be documented in progress entries
- Progress provides context that task files cannot capture (discoveries, decisions, debugging sessions)

## 7. Templates for New Progress Files

### 7.1 `progress_log.md` Template

```markdown
# Project Progress Log: {Project Name}

**Project**: {Project Name}  
**Started**: {YYYY-MM-DD}

## Progress Entry - {YYYY-MM-DD HH:MM UTC}

### Context
Initial project setup and progress tracking initialization.

### Key Accomplishments
- Project directory structure created
- Initial planning and scoping completed
- Progress tracking system established

### Current Situation
- Project ready for active development
- Task planning phase [complete/in progress]

### Immediate Next Actions
1. [Define specific next steps]
2. [Priority actions for first work session]

### Key Files
- `_parallel/projects/{project}/plan.md` - Project requirements and scope
- `_parallel/projects/{project}/TASKS.md` - Task checklist
- `_parallel/projects/{project}/PROJECT.md` - Project metadata

### Notes & Discoveries
- [Any initial insights or decisions made during setup]
```

### 7.2 `STATUS.md` Template

```markdown
# Current Status ‚Äì {Project Name}

**Last Updated**: {YYYY-MM-DDTHH:MM:SSZ}

## At-a-Glance
| Metric            | Value                                |
|-------------------|--------------------------------------|
| Active Tasks      | [None yet / List current tasks]      |
| Completed Tasks   | 0 / [total planned]                  |
| Next Priority     | [Initial project setup / Next action]|
| Blockers          | [None / List any blockers]           |
| Target Milestone  | [Project completion goal]            |

## High-Level Goal
[One-sentence north-star objective for the project]

## Immediate Next Actions
1. [Define specific next steps]
2. [Priority actions for first work session]
3. [Success criteria for next session]

## Links
- Task board ‚Üí `_parallel/projects/{project}/TASKS.md`
- Detailed log ‚Üí `_parallel/projects/{project}/progress_log.md`
- PRD ‚Üí `_parallel/projects/{project}/plan.md`
```

## 8. Best Practices

### For Agents
- Always read existing progress file before adding new entries
- Append new entries chronologically (never modify existing entries)
- **Use timestamps from the `date -u +"%Y-%m-%dT%H:%M:%SZ"` command - NEVER hardcode or guess timestamps**
- Include sufficient context for seamless session transfer
- Reference specific task IDs and file paths when relevant

### Generate Timestamps

- For `progress_log.md` entry headings use:
```bash
date -u +"%Y-%m-%d %H:%M UTC"
```
- For `STATUS.md` *Last Updated* field use:
```bash
date -u +"%Y-%m-%dT%H:%M:%SZ"
```

### For Context Transfer
- Progress files should provide complete context for new AI sessions
- Include enough technical detail for immediate continuation of work
- Document both successes and failures/blockers
- Preserve the complete development narrative

### For Project Management
- Progress files serve as detailed project journals
- They complement but don't replace task files and PROJECT.md
- Use for capturing discoveries that don't fit in task documentation
- Valuable for post-project retrospectives and pattern recognition

**Fetching this Rule**:
- Use `@handoff.mdc` or `task-magic/handoff.mdc` when needing to understand progress-based handoff procedures.
