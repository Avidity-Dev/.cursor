---
description: How to write PRD documents.
globs: 
alwaysApply: false
---
# How to write a Product Requirements Document (PRD)

## 1. Format

### 1.1 File location

These documents should be stored in `docs/PRDs`.

### 1.2. Title

Each file name should start `PRD_XXX_` where XXX is an arbitraty number starting at 1 with the first PRD and incrementing with each next PRD. To determine the number to use, search the PRD folder for files with this prefix and determine what the last number used was.

### 1.3. Body

- Include a Table of Contents at the top
- Use numbered sectioning
- Include code examples
- Be as clear as possible and style this to be read by a Large Language Model (LLM)
- Include a motivation section at the beginning, followed by a more detailed overview
- If you use icons, include an icon legend
- Divide the project into milestones, each with very specific and focused tasks.

## 2. Project Process

### 2.1. Requirements Review Steps
1. Systematically review each PRD document
2. Summarize key requirements
3. Identify dependencies
4. Note potential challenges
5. Ask clarifying questions
6. Validate understanding before proceeding
7. Document everything in a progress report

### 2.2. Work Organization Principles
- Follow project phases strictly
- Treat preliminary work as drafts for review
- Get approval before moving to next tasks
- Document everything in a progress report


# Guidelines for Code Examples in PRDs

When including code examples in Product Requirement Documents (PRDs) or similar planning documents, the primary goal is to clearly illustrate the intended design, critical logic, and interaction with key libraries or tools (e.g., `dlt`, specific APIs). These examples serve both human developers and AI assistants in understanding the project.

## Key Principles:

1.  **Illustrative, Not Exhaustive:**
    *   Code examples should focus on the most important aspects of the proposed solution. They are not expected to be production-ready, fully error-handled, or cover every edge case unless that edge case is critical to the design being explained.
    *   Avoid excessive boilerplate or overly detailed utility functions if they don't contribute directly to understanding the core concept being presented.

2.  **Clarity of Core Logic:**
    *   Highlight the main algorithms, data flow, and decision-making processes.
    *   If a specific library or framework (like `dlt`) is central, showcase how its key features (e.g., sources, transformers, resources, incremental loading decorators) are intended to be used.

3.  **Strategic Commenting:**
    *   **Explain the "Why":** Comments should primarily explain *why* a certain approach is taken, *why* a specific library feature is used, or the rationale behind a non-obvious piece of logic. This is particularly helpful for AI assistants.
    *   **Avoid Redundancy:** Do not add comments that merely restate what the code clearly does (e.g., `# assign x to y` for `y = x`).
    *   **Tool-Specific Patterns:** If the code uses decorators or patterns specific to a tool (e.g., `@dlt.resource`, `yield dlt.mark.with_table_name(...)`), a brief comment explaining the purpose or effect of that pattern can be very beneficial.

4.  **Contextual Documentation (Docstrings):**
    *   When providing snippets that represent functions, classes, or modules, include brief docstrings (module, class, or function level) to explain the overall purpose, key parameters, and expected return values or behavior. This sets the context for the code that follows.

5.  **Focus on Critical Sections:**
    *   If certain parts of the code are absolutely critical to the design's success or scalability (e.g., ensuring stream processing for large files, specific error handling for a known problematic case), these sections should be clearly implemented or at least stubbed out with comments explaining their importance.

6.  **Readability:**
    *   Use clear variable names and maintain good formatting, even for example code.

The aim is to make the PRD's code examples a useful blueprint that effectively communicates the intended design and critical implementation details to any reader, including an AI assistant tasked with further developing or analyzing the code.
