---
description: git guidelines
globs: 
alwaysApply: false
---
# Git and GitHub Best Practices in Cursor Agent

## Command Line Output Handling

### 1. Pager Commands
Always pipe commands that might invoke a pager to `cat`. This includes:
- `git log`
- `git branch -a`
- `git diff`
- Any command that might produce lengthy output

Example:
```bash
# Correct
git log --oneline --graph --all | cat
git branch -a | cat
git diff --name-status main...feature/branch | cat

# Incorrect (might hang waiting for user input)
git log
git branch -a
git diff
```

### 2. Multi-line commit messages

Write multi-line commits like so:

```bash
git commit -m "Enhancement: Improve SnowflakeConnector with explicit authentication methods" -m "- Added auth_method parameter to SnowflakeConnector (key_vault, sso, password)" -m "- Created dedicated methods for each authentication type" -m "- Moved mask_sensitive_data to new utils.py module" -m "- Updated application code to use connection.py directly" -m "- Added comprehensive tests for different auth methods" -m "- Fixed account masking in get_safe_connection_params" -m "- Created detailed progress report"
```

## Repository Setup Best Practices

# Git and GitHub Best Practices in Cursor Agent

// ... existing code ...

## Repository Setup Best Practices

### 1. Initial Repository Setup
1. Create basic structure first (README.md, .gitignore) on main branch
2. Push main branch to establish it as the base
3. Create feature branches for new work

Example for initial setup:
```bash
# Initial repository setup (only done once)
git init
git add README.md .gitignore
git commit -m "Initial commit: Basic repository setup"
git remote add origin <repository-url>
git push -u origin main
```

Example for typical feature development:
```bash
# Start new feature
git checkout main
git pull  # Get latest changes
git checkout -b feature/new-feature

# Make changes and commit
git add .
git commit -m "feat: Add new feature" # but be much more descriptive here

# Push feature branch
git push -u origin feature/new-feature
```

### 2. Branch Management
1. Always create feature branches from a clean main branch
2. Use descriptive branch names (e.g., `feature/project-setup`)
3. Clean up stale branches with `git remote prune origin`
4. Set up branch tracking explicitly when needed:

```bash
git branch --set-upstream-to=origin/<branch> <branch>
```

### 3. Pull Request Workflow
1. Ensure main branch is clean and minimal before creating PR
2. Create feature branch for substantial changes
3. Push both branches before creating PR
4. Delete feature branches after successful merge
5. Use `git remote prune origin` to clean up after merges

## Common Issues and Solutions

### 1. Branch Tracking
If you see "no tracking information for the current branch":

```bash
git branch --set-upstream-to=origin/<branch> <branch>
```

### 2. Cleaning Up Remote References

After deleting branches on GitHub:

```bash
git remote prune origin  # Removes stale remote-tracking branches
```

## High-Risk Operations

### 1. When to Create Backup Branches

Only create backup branches before high-risk operations such as:
- Major repository reorganization
- Changing the default branch structure
- Operations requiring force push to main
- Complex rebases or history modifications

Example backup workflow:

```bash
# Before risky operation
git branch backup-description-of-change

# If something goes wrong
git checkout backup-description-of-change -- path/to/file  # Restore specific files
```

### 2. Force Push Safety

- Avoid force push to main branch
- Use force push carefully with feature branches
- Create backup branches before force pushing to important branches

### 3. Repository Restructuring

When doing major repository restructuring:
- Keep temporary file copies in a separate directory
- Create a backup branch
- Test changes thoroughly before cleaning up backups
- Use descriptive backup names that indicate purpose

## GitHub Repository Settings

### 1. Default Branch
- Set default branch in GitHub repository settings under "General" section
- Change default branch before setting up protection rules
- Clean up old default branches after changing

### 2. Branch Protection
- Configure branch protection rules after setting default branch
- Consider protecting main branch from direct pushes
- Set up required reviews if working in a team