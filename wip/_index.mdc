---
description: 
globs: 
alwaysApply: false
---
---
rule-status: wip
---

# Cursor Rules Index & Fetch Guidance

This index provides guidance on **when to fetch each rule** using the `fetch_rules` tool. The rule descriptions below are just summaries - always fetch the full rule when the trigger conditions are met.

## üö® CRITICAL: Always Fetch Before Acting

These rules contain specific procedures that **MUST** be fetched and read before taking action:

### Task Magic System Rules
- **`.task-magic/tasks`** - üö® **FETCH BEFORE**: Creating, updating, or working with any task files in `.ai/tasks/` or `.ai/TASKS.md`
  - Contains required procedures for timestamps (date command), task IDs, file naming, YAML format
  - Contains workflow procedures for status updates and dependencies
- **`.task-magic/plan`** - üö® **FETCH BEFORE**: Creating or updating PRD files in `.ai/plans/`
- **`.task-magic/memory`** - üö® **FETCH BEFORE**: Archiving tasks or working with `.ai/memory/`
- **`.task-magic/expand`** - üö® **FETCH BEFORE**: Determining if a task should be broken into sub-tasks

### Critical Development Rules
- **`general/ai_human_collaboration_protocol`** - üö® **FETCH BEFORE**: Starting any significant user request
- **`python/testing`** - üö® **FETCH BEFORE**: Writing or running tests
- **`git/git_best_practices`** - üö® **FETCH BEFORE**: Making git commits or branch operations

## üìã Fetch When Relevant Context Needed

These rules provide important context and should be fetched when their domain is relevant:

### Code Quality & Style
- **`python/code_style`** - **FETCH WHEN**: Writing or reviewing Python code
- **`document/add-comments`** - **FETCH WHEN**: Adding documentation or comments to code
- **`general/development_workflow`** - **FETCH WHEN**: Working on development tasks
- **`general/logging`** - **FETCH WHEN**: Implementing logging or error handling

### Project-Specific Context
- **`projects/mastermind`** - **FETCH WHEN**: Working on Mastermind project features
- **`linear/linear`** - **FETCH WHEN**: Creating, updating, or working with Linear issues
- **`stack/benchling`** - **FETCH WHEN**: Working with Benchling API integration
- **`stack/excel`** - **FETCH WHEN**: Processing Excel files or data extraction

### Documentation & Reporting
- **`general/prd`** - **FETCH WHEN**: Writing Product Requirements Documents
- **`general/reports`** - **FETCH WHEN**: Creating progress reports (RPT)
- **`general/mermaid`** - **FETCH WHEN**: Creating diagrams or flowcharts
- **`general/checkpoint`** - **FETCH WHEN**: User requests a checkpoint

### Infrastructure & Deployment
- **`general/environment`** - **FETCH WHEN**: Working with environment configuration
- **`general/performance_deployment`** - **FETCH WHEN**: Optimizing performance or deployment
- **`general/security`** - **FETCH WHEN**: Implementing security features

## üîß Utility Rules
- **`create_cursor_rules`** - **FETCH WHEN**: Creating new rule files

## ‚ö†Ô∏è Key Principle

**When in doubt, fetch the rule!** It's better to read the complete procedure than to guess or assume. Many rules contain specific commands, formats, or procedures that must be followed exactly.

## üéØ Example Triggers

- **Working with tasks?** ‚Üí Fetch `.task-magic/tasks`
- **Writing Python?** ‚Üí Fetch `python/code_style` 
- **Creating tests?** ‚Üí Fetch `python/testing`
- **Making git commits?** ‚Üí Fetch `git/git_best_practices`
- **User asks for checkpoint?** ‚Üí Fetch `general/checkpoint`
- **Working with Benchling?** ‚Üí Fetch `stack/benchling`
- **Creating documentation?** ‚Üí Fetch `document/add-comments`
